@startuml
title Canonical Event Lifecycle With Pool, Recycler, and Control Bus

database "Event Pool (sync.Pool)" as Pool
queue "Control Bus" as ControlBus
participant "Provider Component" as Provider
participant "Dispatcher" as Dispatcher
queue "Data Bus" as DataBus
actor "Consumer A (lambda)" as CON_A
actor "Consumer B (lambda)" as CON_B
participant "Recycler\n(reset + put back)" as Recycler

group Control plane
  CON_A -> ControlBus : Subscribe / Unsubscribe
  CON_B -> ControlBus : SubmitOrder / QueryOrder
  ControlBus -> Dispatcher : routing updates (versioned)
end group

loop Event lifecycle (per canonical event)
  Pool --> Provider : Get() *Event
  Provider -> Dispatcher : *Event
  Dispatcher -> Dispatcher : stamp routing_version (current)

  Dispatcher -> Dispatcher : find subscribers (routing table)
  alt fan-out > 1
    loop per-subscriber
      Dispatcher -> Pool : Get() *Dup
      Dispatcher -> Dispatcher : clone into *Dup
      Dispatcher -> DataBus : publish *Dup
    end
    Dispatcher -> Recycler : recycle(original)
  else fan-out == 1
    Dispatcher -> DataBus : publish original
  end

  par Delivery and return
    DataBus --> CON_A : event
    CON_A -> Recycler : auto-recycle after lambda returns or panics
  else
    DataBus --> CON_B : event
    CON_B -> Recycler : auto-recycle after lambda returns or panics
  end
end

note over Dispatcher,DataBus
Consumers may ignore market-data during flips using routing_version.
Critical kinds (ExecReport, ControlAck, ControlResult) are never ignored.
end note
@enduml
