name: ci
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25'
      - run: go version
      - run: go mod download
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          only-new-issues: true
      - name: Ban backward-compatibility code
        run: |
          echo "Checking for banned backward-compatibility patterns..."
          if grep -r "legacy\|deprecated\|shim\|feature_flag" internal/ cmd/ 2>/dev/null; then
            echo "ERROR: Backward-compatibility code detected (banned by CQ-08/GOV-04)"
            echo "The constitution prohibits: legacy contracts, deprecated APIs, shims, and feature flags"
            exit 1
          fi
          echo "✓ No backward-compatibility code found"
      - name: Ban async/pool imports
        run: |
          echo "Checking for banned async/pool imports (PERF-09)..."
          if grep -R '"async/pool"' core/ internal/ cmd/ lib/ tests/ 2>/dev/null; then
            echo "ERROR: async/pool import detected (banned by PERF-09)"
            exit 1
          fi
          echo "✓ No banned async/pool imports found"
      - run: make build
      - name: Test with coverage
        run: go test ./... -race -coverprofile=coverage.out -count=1 -timeout=30s
      - name: Check coverage threshold
        run: |
          echo "Checking coverage threshold (≥70% required by TS-01)..."
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 70.0" | bc -l) )); then
            echo "ERROR: Coverage $COVERAGE% is below 70% threshold (TS-01)"
            exit 1
          fi
          echo "✓ Coverage threshold satisfied: $COVERAGE% ≥ 70%"
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  integration-race:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25'
      - run: go version
      - name: Run integration tests with race detector
        run: go test ./tests/integration -race -count=1 -timeout=5m
